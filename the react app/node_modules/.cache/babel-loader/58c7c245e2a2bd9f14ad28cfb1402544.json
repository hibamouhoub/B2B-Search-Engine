{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Mh\\\\Desktop\\\\searchengine\\\\src\\\\components\\\\CompanyPage.js\";\nimport React from 'react';\nimport axios from 'axios';\nimport CompanyInfo from './CompanyInfo';\nimport { Network, Node, Edge } from 'react-vis-network';\nimport MyNav from './nav';\nimport names from './names';\nimport { nodeColorsConfig, relationsConfig } from './usefulFunctions';\n\nclass CompanyPage extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      networkComponent: React.createRef(),\n      //  currentCompany est un objet JSON qui contient tous les infos de l'entreprise actuelle\n      currentCompany: {},\n      //  relations est un array contenant tous les partenaires, filiales, clients et fournisseurs de l'entreprise actuelle\n      relations: [],\n      //  Les booleans suivants servent à gérer l'affichage des noeuds qui précisent le type de relation entre \n      //  l'entreprise actuelle et les autres. Par exemple, si l'entreprise actuelle possède une ou plusieurs filiales\n      //  la valeur du boolean filiales sera changé à true \n      partners: false,\n      headquarter: false,\n      filiales: false,\n      clients: false,\n      fournisseurs: false\n    };\n  }\n\n  componentDidMount() {\n    this.state.networkComponent.current.network.on(\"click\", event => {\n      if (names.includes(event.nodes[0])) {\n        this.props.handleNew(event.nodes[0]);\n      }\n    });\n    const api = axios.create({\n      baseURL: 'http://localhost:9200/proto/_search?q=company_name:\"' + this.props.companyName + '\"'\n    });\n    api.get('').then(async res => {\n      let currentCompany = res.data.hits.hits[0]._source;\n      let stringSearch = 'http://localhost:9200/proto/_search?q=id:' + currentCompany.Partenaire__002 + '%20OR%20id:' + currentCompany.Partenaire__001 + '%20OR%20id:' + currentCompany[\"Clients__-\"] + '%20OR%20id:' + currentCompany[\"filiales__-\"] + '%20OR%20id:' + currentCompany[\"fournisseur__-\"] + '%20OR%20id:' + currentCompany.hearquarter;\n      api.get(stringSearch).then(async result => {\n        let relationsConfigs = relationsConfig(currentCompany, result);\n        this.setState({\n          currentCompany: currentCompany,\n          relations: relationsConfigs.relations,\n          partners: relationsConfigs.partners,\n          headquarter: relationsConfigs.headquarter,\n          filiales: relationsConfigs.filiales,\n          clients: relationsConfigs.clients,\n          fournisseurs: relationsConfigs.fournisseurs\n        });\n      });\n    });\n  }\n\n  render() {\n    //  La constantes suivante contients les noeuds du réseau\n    //  La fonction nodeColorConfig se charge de la configuration\n    //  des couleurs selon le type de la relation\n    const partnersNode = this.state.relations.map(partner => {\n      let config = nodeColorsConfig(this.state.currentCompany, partner);\n      return /*#__PURE__*/React.createElement(Node, {\n        id: partner.company_name,\n        x: config.x,\n        y: config.y,\n        label: partner.company_name,\n        color: config.colorNode,\n        shape: config.shape,\n        font: config.font,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 14\n        }\n      });\n    });\n    const partnersEdges = this.state.relations.map(partner => {\n      if (partner.id == this.state.currentCompany.hearquarter) {\n        return /*#__PURE__*/React.createElement(Edge, {\n          id: this.state.currentCompany.id + partner.id,\n          from: \"200\",\n          to: partner.company_name,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 16\n          }\n        });\n      }\n\n      if (partner.id == this.state.currentCompany.Partenaire__002 || partner.id == this.state.currentCompany.Partenaire__001) {\n        return /*#__PURE__*/React.createElement(Edge, {\n          id: this.state.currentCompany.id + partner.id,\n          from: \"100\",\n          to: partner.company_name,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 16\n          }\n        });\n      }\n\n      if (partner.id == this.state.currentCompany[\"fournisseur__-\"]) {\n        return /*#__PURE__*/React.createElement(Edge, {\n          id: this.state.currentCompany.id + partner.id,\n          from: \"300\",\n          to: partner.company_name,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 16\n          }\n        });\n      }\n\n      if (partner.id == this.state.currentCompany[\"Clients__-\"]) {\n        return /*#__PURE__*/React.createElement(Edge, {\n          id: this.state.currentCompany.id + partner.id,\n          from: \"400\",\n          to: partner.company_name,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 16\n          }\n        });\n      }\n\n      if (partner.id == this.state.currentCompany[\"filiales__-\"]) {\n        return /*#__PURE__*/React.createElement(Edge, {\n          id: this.state.currentCompany.id + partner.id,\n          from: \"500\",\n          to: partner.company_name,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 16\n          }\n        });\n      }\n\n      return /*#__PURE__*/React.createElement(Edge, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 14\n        }\n      });\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(MyNav, {\n      handleClick: this.handleClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row mt-5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-sm-4 ml-5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(CompanyInfo, {\n      currentCompany: this.state.currentCompany,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-sm-7\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"network\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Network, {\n      ref: this.state.networkComponent,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Node, {\n      id: \"1000\",\n      label: this.state.currentCompany.company_name,\n      color: \"#000000\",\n      x: \"0\",\n      y: \"100\",\n      fixed: {\n        x: true,\n        y: true\n      },\n      font: {\n        color: \"white\",\n        size: 25\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }\n    }), this.state.partners ? /*#__PURE__*/React.createElement(Node, {\n      id: \"100\",\n      label: \"Partenaires\",\n      color: \"#AC3B61\",\n      x: \"200\",\n      y: \"200\",\n      fixed: {\n        x: true,\n        y: true\n      },\n      size: \"15\",\n      shape: \"dot\",\n      font: {\n        color: \"#AC3B61\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 40\n      }\n    }) : /*#__PURE__*/React.createElement(Edge, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 191\n      }\n    }), this.state.headquarter ? /*#__PURE__*/React.createElement(Node, {\n      id: \"200\",\n      label: \"Headquarter\",\n      color: \"#888888\",\n      x: \"200\",\n      y: \"0\",\n      fixed: {\n        x: true,\n        y: true\n      },\n      size: \"15\",\n      shape: \"dot\",\n      font: {\n        color: \"#888888\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 43\n      }\n    }) : /*#__PURE__*/React.createElement(Edge, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 192\n      }\n    }), this.state.fournisseurs ? /*#__PURE__*/React.createElement(Node, {\n      id: \"300\",\n      label: \"Fournisseurs\",\n      color: \"#123C69\",\n      x: \"200\",\n      y: \"100\",\n      fixed: {\n        x: true,\n        y: true\n      },\n      size: \"15\",\n      shape: \"dot\",\n      font: {\n        color: \"#123C69\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 44\n      }\n    }) : /*#__PURE__*/React.createElement(Edge, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 196\n      }\n    }), this.state.clients ? /*#__PURE__*/React.createElement(Node, {\n      id: \"400\",\n      label: \"Clients\",\n      color: \"#FFAE42\",\n      size: \"15\",\n      x: \"200\",\n      y: \"0\",\n      fixed: {\n        x: true,\n        y: true\n      },\n      shape: \"dot\",\n      font: {\n        color: \"#FFAE42\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 39\n      }\n    }) : /*#__PURE__*/React.createElement(Edge, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 184\n      }\n    }), this.state.filiales ? /*#__PURE__*/React.createElement(Node, {\n      id: \"500\",\n      label: \"Filiales\",\n      color: \"#888888\",\n      size: \"15\",\n      fixed: {\n        x: true,\n        y: true\n      },\n      shape: \"dot\",\n      font: {\n        color: \"#888888\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 40\n      }\n    }) : /*#__PURE__*/React.createElement(Edge, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 172\n      }\n    }), this.state.partners ? /*#__PURE__*/React.createElement(Edge, {\n      id: \"100\",\n      from: \"1000\",\n      smooth: {\n        enabled: true\n      },\n      to: \"100\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 40\n      }\n    }) : /*#__PURE__*/React.createElement(Edge, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 108\n      }\n    }), this.state.headquarter ? /*#__PURE__*/React.createElement(Edge, {\n      id: \"200\",\n      from: \"1000\",\n      smooth: {\n        enabled: true\n      },\n      to: \"200\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 43\n      }\n    }) : /*#__PURE__*/React.createElement(Edge, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 111\n      }\n    }), this.state.fournisseurs ? /*#__PURE__*/React.createElement(Edge, {\n      id: \"300\",\n      from: \"1000\",\n      smooth: {\n        enabled: true\n      },\n      to: \"300\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 44\n      }\n    }) : /*#__PURE__*/React.createElement(Edge, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 112\n      }\n    }), this.state.clients ? /*#__PURE__*/React.createElement(Edge, {\n      id: \"400\",\n      from: \"1000\",\n      smooth: {\n        enabled: true\n      },\n      to: \"400\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 39\n      }\n    }) : /*#__PURE__*/React.createElement(Edge, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 107\n      }\n    }), this.state.filiales ? /*#__PURE__*/React.createElement(Edge, {\n      id: \"500\",\n      from: \"1000\",\n      smooth: {\n        enabled: true\n      },\n      to: \"500\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 40\n      }\n    }) : /*#__PURE__*/React.createElement(Edge, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 108\n      }\n    }), partnersEdges, partnersNode)))));\n  }\n\n}\n\nexport default CompanyPage;","map":{"version":3,"sources":["C:/Users/Mh/Desktop/searchengine/src/components/CompanyPage.js"],"names":["React","axios","CompanyInfo","Network","Node","Edge","MyNav","names","nodeColorsConfig","relationsConfig","CompanyPage","Component","constructor","state","networkComponent","createRef","currentCompany","relations","partners","headquarter","filiales","clients","fournisseurs","componentDidMount","current","network","on","event","includes","nodes","props","handleNew","api","create","baseURL","companyName","get","then","res","data","hits","_source","stringSearch","Partenaire__002","Partenaire__001","hearquarter","result","relationsConfigs","setState","render","partnersNode","map","partner","config","company_name","x","y","colorNode","shape","font","partnersEdges","id","handleClick","color","size","enabled"],"mappings":"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","sourcesContent":["import React from 'react';\nimport axios from 'axios'\nimport CompanyInfo from './CompanyInfo'\nimport { Network, Node, Edge } from 'react-vis-network'\nimport MyNav from './nav'\nimport names from './names'\nimport { nodeColorsConfig, relationsConfig } from './usefulFunctions'\n\n\nclass CompanyPage extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      networkComponent: React.createRef(),\n      //  currentCompany est un objet JSON qui contient tous les infos de l'entreprise actuelle\n      currentCompany: {},\n      //  relations est un array contenant tous les partenaires, filiales, clients et fournisseurs de l'entreprise actuelle\n      relations: [],\n      //  Les booleans suivants servent à gérer l'affichage des noeuds qui précisent le type de relation entre \n      //  l'entreprise actuelle et les autres. Par exemple, si l'entreprise actuelle possède une ou plusieurs filiales\n      //  la valeur du boolean filiales sera changé à true \n      partners: false,\n      headquarter: false,\n      filiales: false,\n      clients: false,\n      fournisseurs: false\n    }\n  }\n  componentDidMount() {\n    this.state.networkComponent.current.network.on(\"click\", event => {\n      if (names.includes(event.nodes[0])) {\n        this.props.handleNew(event.nodes[0])\n      }\n    });\n\n\n    const api = axios.create({\n      baseURL: 'http://localhost:9200/proto/_search?q=company_name:\"' + this.props.companyName + '\"'\n    })\n    api.get('')\n      .then(async (res) => {\n        let currentCompany = res.data.hits.hits[0]._source\n\n        let stringSearch = 'http://localhost:9200/proto/_search?q=id:'\n          + currentCompany.Partenaire__002 + '%20OR%20id:'\n          + currentCompany.Partenaire__001 + '%20OR%20id:'\n          + currentCompany[\"Clients__-\"] + '%20OR%20id:'\n          + currentCompany[\"filiales__-\"] + '%20OR%20id:'\n          + currentCompany[\"fournisseur__-\"] + '%20OR%20id:'\n          + currentCompany.hearquarter\n\n        api.get(stringSearch)\n          .then(async (result) => {\n            let relationsConfigs = relationsConfig(currentCompany,result)\n            this.setState({\n              currentCompany: currentCompany,\n              relations: relationsConfigs.relations,\n              partners: relationsConfigs.partners,\n              headquarter: relationsConfigs.headquarter,\n              filiales: relationsConfigs.filiales,\n              clients: relationsConfigs.clients,\n              fournisseurs: relationsConfigs.fournisseurs\n            })\n          })\n      });\n  }\n\n  render() {\n\n    //  La constantes suivante contients les noeuds du réseau\n    //  La fonction nodeColorConfig se charge de la configuration\n    //  des couleurs selon le type de la relation\n    const partnersNode = this.state.relations.map(partner => {\n      let config = nodeColorsConfig(this.state.currentCompany, partner)\n      return <Node\n        id={partner.company_name}\n        x={config.x}\n        y={config.y}\n        label={partner.company_name}\n        color={config.colorNode}\n        shape={config.shape}\n        font={config.font}\n      />\n    })\n\n\n    const partnersEdges = this.state.relations.map(partner => {\n      if (partner.id == this.state.currentCompany.hearquarter) {\n        return <Edge id={this.state.currentCompany.id + partner.id} from=\"200\" to={partner.company_name} />\n      }\n      if (partner.id == this.state.currentCompany.Partenaire__002 || partner.id == this.state.currentCompany.Partenaire__001) {\n        return <Edge id={this.state.currentCompany.id + partner.id} from=\"100\" to={partner.company_name} />\n      }\n      if (partner.id == this.state.currentCompany[\"fournisseur__-\"]) {\n        return <Edge id={this.state.currentCompany.id + partner.id} from=\"300\" to={partner.company_name} />\n      }\n      if (partner.id == this.state.currentCompany[\"Clients__-\"]) {\n        return <Edge id={this.state.currentCompany.id + partner.id} from=\"400\" to={partner.company_name} />\n      }\n      if (partner.id == this.state.currentCompany[\"filiales__-\"]) {\n        return <Edge id={this.state.currentCompany.id + partner.id} from=\"500\" to={partner.company_name} />\n      }\n      return <Edge />\n    })\n\n\n    return (\n      <div>\n        <MyNav handleClick={this.handleClick} />\n        <div className=\"row mt-5\">\n          <div className=\"col-sm-4 ml-5\">\n            <CompanyInfo currentCompany={this.state.currentCompany} />\n          </div>\n          <div className=\"col-sm-7\">\n            <div className=\"network\">\n              <Network ref={this.state.networkComponent}>\n                <Node id=\"1000\" label={this.state.currentCompany.company_name} color=\"#000000\" x=\"0\" y=\"100\" fixed={{ x: true, y: true }} font={{ color: \"white\", size: 25 }} />\n                {this.state.partners ? <Node id=\"100\" label=\"Partenaires\" color=\"#AC3B61\" x=\"200\" y=\"200\" fixed={{ x: true, y: true }} size=\"15\" shape=\"dot\" font={{ color: \"#AC3B61\" }} /> : <Edge />}\n                {this.state.headquarter ? <Node id=\"200\" label=\"Headquarter\" color=\"#888888\" x=\"200\" y=\"0\" fixed={{ x: true, y: true }} size=\"15\" shape=\"dot\" font={{ color: \"#888888\" }} /> : <Edge />}\n                {this.state.fournisseurs ? <Node id=\"300\" label=\"Fournisseurs\" color=\"#123C69\" x=\"200\" y=\"100\" fixed={{ x: true, y: true }} size=\"15\" shape=\"dot\" font={{ color: \"#123C69\" }} /> : <Edge />}\n                {this.state.clients ? <Node id=\"400\" label=\"Clients\" color=\"#FFAE42\" size=\"15\" x=\"200\" y=\"0\" fixed={{ x: true, y: true }} shape=\"dot\" font={{ color: \"#FFAE42\" }} /> : <Edge />}\n                {this.state.filiales ? <Node id=\"500\" label=\"Filiales\" color=\"#888888\" size=\"15\" fixed={{ x: true, y: true }} shape=\"dot\" font={{ color: \"#888888\" }} /> : <Edge />}\n                {this.state.partners ? <Edge id=\"100\" from=\"1000\" smooth={{ enabled: true }} to=\"100\" /> : <Edge />}\n                {this.state.headquarter ? <Edge id=\"200\" from=\"1000\" smooth={{ enabled: true }} to=\"200\" /> : <Edge />}\n                {this.state.fournisseurs ? <Edge id=\"300\" from=\"1000\" smooth={{ enabled: true }} to=\"300\" /> : <Edge />}\n                {this.state.clients ? <Edge id=\"400\" from=\"1000\" smooth={{ enabled: true }} to=\"400\" /> : <Edge />}\n                {this.state.filiales ? <Edge id=\"500\" from=\"1000\" smooth={{ enabled: true }} to=\"500\" /> : <Edge />}\n                {partnersEdges}\n                {partnersNode}\n              </Network>\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n\n  }\n}\n\nexport default CompanyPage;\n"]},"metadata":{},"sourceType":"module"}